# Starter pipeline 
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
name: $(Date:yyyyMMdd)$(Rev:.r)

# specific branch build
trigger:
  branches:
    include:
    - develop
    - release

variables:
  SOURCE_DIR: '$(System.DefaultWorkingDirectory)' # eg /home/vsts/work/1/s
  BUILD_DIR: '$(SOURCE_DIR)/build'
  INSTALL_DIR: '$(SOURCE_DIR)/roadrunner-$(Agent.OS)'
  LLVM_INSTALL_PREFIX: '$(SOURCE_DIR)/llvm' # e.g./home/vsts/work/1
  DEPS_INSTALL_PREFIX: '$(SOURCE_DIR)/libroadrunner-deps' # e.g./home/vsts/work/1
  SWIG_SOURCE_DIR: '$(SOURCE_DIR)/swig'
  SWIG_INSTALL_PREFIX: '$(SWIG_SOURCE_DIR)/install-azure'
  SWIG_EXECUTABLE: '$(SWIG_INSTALL_PREFIX)/bin/swig'

stages:
  ########################################################################
  # MacOS Build
  #
  - stage: MacBuildRoadrunnerPython
    dependsOn: []
    jobs:
      - job: MacBuildRoadrunnerPython
        timeoutInMinutes: "0"
        displayName: MacBuildRoadrunnerPython
        continueOnError: "false"
        pool:
          vmImage: 'macOS-11'
        strategy:
          matrix:
            py38:
              PythonVersion: 3.8
              PythonName: py38
            py39:
              PythonVersion: 3.9
              PythonName: py39
            py310:
              PythonVersion: 3.10
              PythonName: py310
            py311:
              PythonVersion: 3.11
              PythonName: py311
        variables:
          MinicondaRoot : '/usr/local/miniconda'
          PythonRoot: '$(MinicondaRoot)/envs/$(PythonName)'
          PythonLibDir: '$(PythonRoot)/lib'
          PythonExecutable: '$(PythonRoot)/bin/python'
          CondaExecutable: '$(MinicondaRoot)/condabin/conda'
          PipExecutable: '$(PythonRoot)/bin/pip'
          SWIG_CACHE: 'false'
          MINICONDA_CACHE: 'false'
          LLVM_CACHE: 'false'
          LLVM_DOWNLOAD_LINK: 'https://github.com/sys-bio/llvm-13.x/releases/download/llvmorg-13.0.0/llvm-13.x-macosx_11_7_x86_64.zip'
        steps:
          - checkout: self
            submodules: recursive
          - bash: echo "##vso[task.prependpath]$CONDA/bin"
            displayName: Add conda to PATH

          # On Hosted macOS, the agent user doesn't have ownership of Miniconda's installation directory/
          # We need to take ownership if we want to update conda or install packages globally
          - bash: sudo chown -R $USER $CONDA
            displayName: Take ownership of conda installation
          - script: |
              echo "cd to source dir: $(SOURCE_DIR)"
              cd $(SOURCE_DIR)
              echo "ls"
              ls
              echo "which conda"
              which conda
              echo "cd miniconda root: $(MinicondaRoot)"
              cd $(MinicondaRoot)
              echo "ls"
              ls
              $(CondaExecutable) create --quiet --yes --name $(PythonName) python=$(PythonVersion) -c conda-forge
              echo "running: $(PipExecutable) install -r $(SOURCE_DIR)/test-requirements.txt"
              $(PipExecutable) install -r $(SOURCE_DIR)/test-requirements.txt
            displayName: InstallCondaEnv
          - script: |
              which conda
              which python
              echo "PythonVersion $(PythonVersion)"
              echo "PythonName $(PythonName)"
              echo "MinicondaRoot $(MinicondaRoot)"
              echo "PythonRoot $(PythonRoot)"
              echo "PythonLibDir $(PythonLibDir)"
              echo "CondaExecutable $(CondaExecutable)"
            displayName: PrintPythonVariables
          - script: |
              mkdir $(DEPS_INSTALL_PREFIX)
            displayName: Make Directories
          - script: |
              $(PipExecutable) install requests
              $(PythonExecutable) ./.azurepipelines/getLLVM.py $(LLVM_DOWNLOAD_LINK) $(LLVM_INSTALL_PREFIX)
              echo "give execute permissions to llvm-config using chmod 777 *"
              cd $(LLVM_INSTALL_PREFIX)/bin
              chmod 777 llvm-config
            displayName: "Get LLVM"
          #            condition: ne(variables.LLVM_CACHE, 'true')


          - task: DownloadPipelineArtifact@2
            inputs:
              source: 'specific'
              project: 'libroadrunner-deps'
              pipeline: 9
              runVersion: 'latest'
              artifact: libroadrunner-deps-$(Agent.OS)-Release
              path: $(DEPS_INSTALL_PREFIX)
            displayName: Download libroadrunner-deps install artifacts
          - script: |
              echo "$(DEPS_INSTALL_PREFIX)"
              echo "cd to $(DEPS_INSTALL_PREFIX)"
              cd $(DEPS_INSTALL_PREFIX)
              echo "ls: "
              ls
              echo "moving contents of $(DEPS_INSTALL_PREFIX)/install to  $(DEPS_INSTALL_PREFIX)"
              mv $(DEPS_INSTALL_PREFIX)/install-azure/Release/** .
              rm -r $(DEPS_INSTALL_PREFIX)/install-azure
              ls
            displayName: Move Dependencies
          #          - task: Cache@2
          #            inputs:
          #              key: "Swig | $(Agent.OS)"
          #              path: $(SWIG_INSTALL_PREFIX)
          #              cacheHitVar: SWIG_CACHE
          #            displayName: Cache Swig-4.0.2
          - script: |
              echo "installing pcre"
              brew install pcre pcre2
              mkdir -p $(SWIG_SOURCE_DIR)
              echo "cd to swig source dir: $(SWIG_SOURCE_DIR)"
              cd $(SWIG_SOURCE_DIR)
              echo "ls"
              ls -lh
              wget -q https://sourceforge.net/projects/swig/files/swig/swig-4.0.2/swig-4.0.2.tar.gz $(SWIG_SOURCE_DIR)
              tar -xf swig-4.0.2.tar.gz
              ls -lh
              echo "Copying swig content from swig-4.0.2 to SWIG_SOURCE_DIR"
              mv swig-4.0.2/** $(SWIG_SOURCE_DIR)
              echo "ls"
              ls -lh
              echo "ls in swig source dir $(SWIG_SOURCE_DIR)"
              ls -lh
              ./configure --prefix=$(SWIG_INSTALL_PREFIX)
              make -j 12
              make install
              echo "ls in swig source dir $(SWIG_SOURCE_DIR)"
              ls
              echo "cd to swig install dir: $(SWIG_INSTALL_PREFIX)"
              cd $(SWIG_INSTALL_PREFIX)
              echo "ls from SWIG_INSTALL_PREFIX: $(SWIG_INSTALL_PREFIX)"
              ls
              if [ ! -f "$(SWIG_EXECUTABLE)" ]; then
                echo "did not locate swig executable, exiting"
                exit
              fi
            displayName: Install Swig
            condition: ne(variables.SWIG_CACHE, 'true')
          - script: |
              mkdir -p $(SOURCE_DIR)
              mkdir -p $(BUILD_DIR)
              mkdir -p $(INSTALL_DIR)
            displayName: Make directories
          - script: |
              echo "cd to source dir: $(SOURCE_DIR)"
              cd $(SOURCE_DIR)
              echo "ls"
              ls
              echo "Variable PythonRoot set to $(PythonRoot)"
              echo "Checking to see whether I can CD to PythonRoot"
              cd $(PythonRoot)
              echo "cd to build dir $(BUILD_DIR)"
              cd $(BUILD_DIR)
              ls
              export LD_LIBRARY_PATH=$(PythonLibDir)
              cmake -DLLVM_INSTALL_PREFIX=$(LLVM_INSTALL_PREFIX) -DRR_DEPENDENCIES_INSTALL_PREFIX=$(DEPS_INSTALL_PREFIX) -DBUILD_TESTS=ON -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIR) -DBUILD_RR_PLUGINS=ON -DBUILD_RR_CAPI=ON -DCMAKE_BUILD_TYPE=Release -DBUILD_PYTHON=ON -DPython_ROOT_DIR=$(PythonRoot) -DSWIG_EXECUTABLE=$(SWIG_EXECUTABLE) -DCMAKE_OSX_ARCHITECTURES="x86_64" ..
              cmake --build . --target install --config Release -j 12
            displayName: BuildRoadrunnerWithPython
          - script: |
              echo "LD_LIBRARY_PATH $LD_LIBRARY_PATH"
              export LD_LIBRARY_PATH=$(PythonLibDir)
              echo "cd to isntall dir: $(INSTALL_DIR)"
              cd $(INSTALL_DIR)
              echo "ls in install dir"
              ls
              #$(PythonExecutable) site-packages/roadrunner/testing/__main__.py
              echo "Switching to build dir: $(BUILD_DIR)"
              cd $(BUILD_DIR)
              echo "ctest --output-on-failure --verbose --extra-verbose --tests-regex python_tests*"
              ctest --output-on-failure --verbose --extra-verbose --tests-regex python_tests*
            displayName: RunPythonTests
          - script: |
              # todo workout whether the top few lines are needed now I'm using $(PythonExecutable)
              #eval "$(conda shell.bash hook)"
              #source activate $(PythonName)
              #echo "which python: $(which python)"
              #echo "which conda: $(which conda)"
              #python_exe="$(which python)"
              echo "cd to isntall dir: $(INSTALL_DIR)"
              cd $(INSTALL_DIR)
              echo "ls in install dir"
              ls
              echo "$(PythonExecutable) setup.py bdist_wheel"
              $(PythonExecutable) setup.py bdist_wheel
              echo "$(PythonExecutable) setup_rrplugins.py bdist_wheel"
              $(PythonExecutable) setup_rrplugins.py bdist_wheel
            displayName: Generate pip wheel

          - task: CopyFiles@2
            inputs:
              contents: '$(INSTALL_DIR)/**'
              targetFolder: $(Build.ArtifactStagingDirectory)/roadrunner-MacOS11-$(PythonName)
            displayName: Copy Install Tree to Staging Area
          - task: CopyFiles@2
            inputs:
              contents: '$(INSTALL_DIR)/dist/**'
              targetFolder: $(Build.ArtifactStagingDirectory)/pip-wheels
            displayName: Copy Pip Wheels to Staging Area
          - publish: $(Build.ArtifactStagingDirectory)
            artifact: roadrunner-MacOS11-$(PythonName)
            displayName: Publish Pip Wheels Artifacts

