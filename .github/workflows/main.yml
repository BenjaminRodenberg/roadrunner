name: Build

on:
  push:
    branches:
      - develop
      - release

  pull_request:
    branches:
      - '*'

env:
  SOURCE_DIR: ${{ github.workspace }}
  BUILD_DIR: ${{ github.workspace }}\build
  INSTALL_DIR: ${{ github.workspace }}\roadrunner-"$RUNNER_OS"
  LLVM_INSTALL_PREFIX: ${{ github.workspace }}\llvm
  DEPS_INSTALL_PREFIX: ${{ github.workspace }}\libroadrunner-deps
  SWIG_SOURCE_DIR: ${{ github.workspace }}\swig
  SWIG_INSTALL_PREFIX: ${{ github.workspace }}\swig\install-azure
  SWIG_EXECUTABLE: ${{ github.workspace }}\swig\install-azure\bin\swig



jobs:
  WindowsBuildRoadrunnerCpp:
    runs-on: windows-latest

    env:
      LLVM_CACHE: 'false'
      MinicondaRoot: 'C:\Miniconda'
      PythonName: 'py39'
      PythonVersion: 3.9
      PythonRoot: ${{ env.MinicondaRoot }}\envs\py39
      PythonLibDir: ${{ env.PythonRoot }}\Lib
      PythonScriptsDir: ${{ env.PythonRoot }}\Scripts
      PythonExecutable: ${{ env.PythonRoot }}\python.exe
      PipExecutable: ${{ env.PythonScriptsDir }}\pip.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Make Directories
        shell: pwsh
        run: |
          mkdir ${{ env.LLVM_INSTALL_PREFIX }}
          mkdir ${{ env.DEPS_INSTALL_PREFIX }}

      - name: Setup conda
        uses: s-weigand/setup-conda@v1
        with:
          update-conda: true
          python-version: ${{ env.PythonVersion }}

      - name: Add conda to PATH
        shell: pwsh
        run: |
          Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"

      - name: Print Python Variables
        shell: pwsh
        run: |
          where.exe conda
          where.exe python
          echo "PythonVersion $${{ env.PythonVersion }}"
          echo "PythonName ${{ env.PythonName }}"
          echo "MinicondaRoot ${{ env.MinicondaRoot }}"
          echo "PythonRoot ${{ env.PythonRoot }}"
          echo "PythonLibDir ${{ env.PipExecutable }}"
            
      - name: Install packages using conda
        shell: pwsh
        run: |
          Write-Host "Creating new conda environment"
          conda create --quiet --yes --name ${{ env.PythonName }} python=${{ env.PythonVersion }}
          Write-Host "pip upgrade:"
          ${{ env.PipExecutable }} install --upgrade pip
          Write-Host "pip help:"
          ${{ env.PipExecutable }} install --help
          Write-Host "${{ env.PipExecutable }} install requests"
          ${{ env.PipExecutable }} install requests
          Write-Host "${{ env.PipExecutable }} install numpy"
          ${{ env.PipExecutable }} install numpy

      - name: Get LLVM
        shell: pwsh
        run: |
          echo "${{ env.PythonExecutable }} .\.azurepipelines\getLLVM.py ${{ env.LLVM_DOWNLOAD_LINK }} ${{ env.LLVM_INSTALL_PREFIX }}"
          ${{ env.PythonExecutable }} .\.azurepipelines\getLLVM.py ${{ env.LLVM_DOWNLOAD_LINK }} ${{ env.LLVM_INSTALL_PREFIX }}
        if: env.LLVM_CACHE == 'false'
          
